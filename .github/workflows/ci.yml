name: ci

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'
#  pull_request:
#    branches: [ dev ]
#    paths-ignore:
#      - '**.md'
#      - '**.txt'

jobs:

  test-local:

    timeout-minutes: 7
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ 3.7, '3.10' ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install mypy
          pip install -e . --use-feature=in-tree-build
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Mypy
        run: mypy
      - name: Run test funcs
        run: python3 -m tests.test_funcs
      - name: Run test 1
        run: python3 -m tests.test_local 1
      - name: Run test 2
        run: python3 -m tests.test_local 2
      - name: Run test 3
        run: python3 -m tests.test_local 3
      - name: Run test 4
        run: python3 -m tests.test_local 4


  test-docker:
    timeout-minutes: 7
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run test 1
        run: python3 -m tests.test_docker 1
      - name: Run test 2
        run: python3 -m tests.test_docker 2
      - name: Run test 3
        run: python3 -m tests.test_docker 3
      - name: Run test 4
        run: python3 -m tests.test_docker 4

  test-lambda:
    concurrency:
      group: lambda
      #group: ${{ github.head_ref }}
      cancel-in-progress: true

    timeout-minutes: 7
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_LAMBDARADO_TESTER_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_LAMBDARADO_TESTER_SECRET_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # if you have/need it
          aws-region: us-east-1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run test 1
        run: python3 -m tests.test_aws 1
      - name: Run test 2
        run: python3 -m tests.test_aws 2
      - name: Run test 3
        run: python3 -m tests.test_aws 3
      - name: Run test 4
        run: python3 -m tests.test_aws 4
      - name: Cleanup
        run: python3 -m tests.test_aws cleanup
#  test:
#    timeout-minutes: 7
#
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, macos-latest ]
#        python-version: [ 3.7, 3.9 ]
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install flake8
#          pip install -e .
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      - name: Lint with flake8
#        run: |
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#      - name: Run unit tests
#        run: |
#          python3 -m unittest discover -t . -s tests
#      - name: Run pkg tests
#        run: |
#          ./test_pkg.sh

  to-staging:
    needs: [test-local, test-docker, test-lambda]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Merge current -> staging
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: staging
          github_token: ${{ github.token }}

  to-master:
    # if the commit message was "publish", copy the tested code
    # to "master" branch and create GitHub release

    if: github.event.head_commit.message=='publish'
    needs: [test-local, test-docker, test-lambda]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # UPDATE MASTER BRANCH
      - name: Merge to master branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: master
          github_token: ${{ github.token }}

      # ADD GITHUB RELEASE
      - name: Get the Python package version
        run: echo "PKGVER=$(.github/package_version.py)" >> $GITHUB_ENV
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PKGVER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ADD PYPI RELEASE
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USR }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PWD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
